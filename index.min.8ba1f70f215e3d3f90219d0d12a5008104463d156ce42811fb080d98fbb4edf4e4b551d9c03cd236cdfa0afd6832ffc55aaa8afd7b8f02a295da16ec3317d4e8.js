var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(c){const d=suggestions.classList.contains('d-none');if(d)return;const a=[...suggestions.querySelectorAll('a')];if(a.length===0)return;const b=a.indexOf(document.activeElement);if(c.key==="ArrowUp"){c.preventDefault();const d=b>0?b-1:0;a[d].focus()}else if(c.key==="ArrowDown"){c.preventDefault();const d=b+1<a.length?b+1:b;a[d].focus()}}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a.add({id:0,href:"https://mymmrac.github.io/telego-docs/docs/",title:"Docs",description:"Documentation of Telego.",content:"Full documentation of Telego\n"}).add({id:1,href:"https://mymmrac.github.io/telego-docs/docs/introduction/",title:"Introduction",description:"Introduction to Telego.",content:"Introduction to Telego\n"}).add({id:2,href:"https://mymmrac.github.io/telego-docs/docs/introduction/overview/",title:"Overview",description:"Overview of capabilities and general structure.",content:"What is Telego? # This library was designed to be the one-to-one implementation of Telegram Bot API, with all methods and types represented in Go code. It\u0026rsquo;s also, easy-to-use and understand, because of the same naming and types as described in Telegram API with as small as possible differences. Telego provides almost all comments and descriptions in godoc.\nSince using bare methods and types is not so convenient, Telego gives you a lot of helpers, utilities, and even update handlers with predicates.\nWhat it can do? # Basically, anything that Telegram provides for developers of bots.\nQuick Start # ⚡️  For a quick start on your new Telegram bot.    Quick Start for fast and easy development.\nTutorial # 🪁  For a more descriptive and full tutorial of Telego.    Tutorial for full features overview.\nShort explanation # If you want to quickly create your first bot and don\u0026rsquo;t want to know the full capabilities of Telego, visit Quick Start.\nIf you want to know more, you can go to Tutorial and read about different parts of Telego and how you can combine them. An in-depth explanation of different \u0026ldquo;levels\u0026rdquo; and concepts that Telego may be informally divided is described in Low Level, Medium Level, and High Level respectfully.\nFill free to build your own abstractions around Telego to fulfill your needs if plain Telego isn\u0026rsquo;t enough for you.\n⚠️  Telego is still in an unstable version, so not everything may work as expected.   How one-to-one implementation achieved? # Managing this number of abilities that Telegram bots provide is quite hard, so Telego parts that represent API are generated from docs itself. Every method and type with respectful documentation is obtained from documentation and restructured in Go code which we can use. If you are interested in how it actually works and how Telego is really easy to maintain up to date, visit generator implementation here.\n"}).add({id:3,href:"https://mymmrac.github.io/telego-docs/docs/introduction/quick-start/",title:"Quick Start",description:"Quick start with basics of creation of Telegram Bot.",content:"Where to start? # If you are a complete beginner and/or have no experience with Telegram Bots or don\u0026rsquo;t know where to start, highly suggest first reading Bots: An introduction for developers in order to understand what bots can do. If you have questions about how to create/modify a bot or what is a bot token, that is also described in the introduction for developers.\nIf you are familiar with bots capabilities, but still don\u0026rsquo;t know how they work, you can read at least some parts of API reference:\n  Authorizing your bot  Making requests  Getting updates  Starting with Telego # For a quick start, you can follow these simple steps and at the end you will have a simple \u0026ldquo;echo\u0026rdquo; bot that sends your messages back to you. From that you can go further exploring Telegram bots.\n⚠️  Error handling may be missing, but I strongly recommend handling all errors.   Get Telego with go get.\ngo get -u github.com/mymmrac/telego Import Telego packages. More about handlers and utils.\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/mymmrac/telego\u0026#34; th \u0026#34;github.com/mymmrac/telego/telegohandler\u0026#34; tu \u0026#34;github.com/mymmrac/telego/telegoutil\u0026#34; ) Create a bot instance and specify optional settings. More about configuration options.\nbotToken := os.Getenv(\u0026#34;TOKEN\u0026#34;) bot, err := telego.NewBot(botToken, telego.WithDefaultLogger(true, true)) if err != nil { fmt.Println(err) os.Exit(1) }  It\u0026rsquo;s not recommended to hardcode tokens, so environment variable was used. Also, both error and debug logs were enabled.\n Get and print bot info. More about methods.\nbotUser, err := bot.GetMe() if err != nil { fmt.Println(err) os.Exit(1) } fmt.Printf(\u0026#34;Bot user: %+v\\n\u0026#34;, botUser)  If everything was properly configured you should see your bot user printed.\n Get updates from Telegram via long pulling (not recommend, more here).\nupdates, _ := bot.UpdatesViaLongPulling(nil) defer bot.StopLongPulling() Create bot handler, register new message handler and start handling updates. More about methods and handlers.\nbh := th.NewBotHandler(bot, updates) bh.HandleMessage(func(bot *telego.Bot, message telego.Message) { chatID := tu.ID(message.Chat.ID) _, _ = bot.CopyMessage( tu.CopyMessage(chatID, chatID, message.MessageID), ) }) bh.Start() defer bh.Stop() Now you are done, after starting your bot you will see debug logs of updates that came to the bot and any sent messages to the bot will be sent back to you.\nNext steps # For more information keep reading next sections of docs, in tutorial the same example will be reviewed more closely with different ways to do things.\nMost of the things you will need to know can be found in Telegram Bot API and/or in these docs, so just keep exploring.\nYou can also look at some other examples located here.\n"}).add({id:4,href:"https://mymmrac.github.io/telego-docs/docs/introduction/tutorial/",title:"Tutorial",description:"Descriptive tutorial with all aspects of Telego, good place to start.",content:"Introduction # In this tutorial you will see different parts of library used to create simple \u0026ldquo;echo\u0026rdquo; bot with more in depth explanation and different ways to do the same thing.\nYou will create bot, set different settings, call Telegram to get bot user, start getting updates with specified parameters, use helper method to get updates, handle updates in simple loop, create new bot handler, use general purpose handlers, use message handler, call Telegram method to send message, use Telego utils to simplify methods usage and use With... methods.\n⚠️  Error handling may be missing, but I strongly recommend handling all errors.   For more examples visit examples folder in GitHub repo here.\nSetup # Get Telego with go get.\ngo get -u github.com/mymmrac/telego Import telego and os (for getting bot token from environment variables, hard coding access tokens is highly insecure).\nimport ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/mymmrac/telego\u0026#34; ) Create bot instance # Get bot token and create new bot from it, also handle error.\nbotToken := os.Getenv(\u0026#34;TOKEN\u0026#34;) bot, err := telego.NewBot(botToken) if err != nil { fmt.Println(err) os.Exit(1) } For this tutorial lets enable debug logs by adding bot options. More about configuration.\nbot, err := telego.NewBot(botToken, telego.WithDefaultLogger(true, true))  Here WithDefaultLogger option accepts settings for default logger - debugMode and printErrors respectively.\n Get bot user # Call Telegram API to get bot user ( getMe method ) and print its info, also handle error. More about methods.\nbotUser, err := bot.GetMe() if err != nil { fmt.Println(err) os.Exit(1) } fmt.Printf(\u0026#34;Bot user: %+v\\n\u0026#34;, botUser)  Good practice to check bot info before starting main bot functionality.\n Getting updates # \u0026hellip;\n"}).add({id:5,href:"https://mymmrac.github.io/telego-docs/docs/introduction/configuration/",title:"Configuration",description:"Configuration that Telego provides when creating bot.",content:"Hmm\u0026hellip;\n"}).add({id:6,href:"https://mymmrac.github.io/telego-docs/docs/levels/",title:"Levels",description:"Different ways of using Telego.",content:"Different ways of using Telego\n"}).add({id:7,href:"https://mymmrac.github.io/telego-docs/docs/levels/low-level/",title:"Low Level",description:"Low level of interaction with Telegram without any helpers.",content:"Hmm\u0026hellip;\n"}).add({id:8,href:"https://mymmrac.github.io/telego-docs/docs/levels/medium-level/",title:"Medium Level",description:"Medium level of interaction with Telegram using helpers and some utilities.",content:"Hmm\u0026hellip;\n"}).add({id:9,href:"https://mymmrac.github.io/telego-docs/docs/levels/high-level/",title:"High Level",description:"High level of interaction with Telegram using all helpers and utilities.",content:"Hmm\u0026hellip;\n"}).add({id:10,href:"https://mymmrac.github.io/telego-docs/docs/methods/",title:"Methods",description:"All about methods and types used in parameters.",content:"All about methods and types used in parameters\n"}).add({id:11,href:"https://mymmrac.github.io/telego-docs/docs/methods/methods-basics/",title:"Methods Basics",description:"General idea of how to use Telego to call Telegram Bot methods.",content:"Hmm\u0026hellip;\n"}).add({id:12,href:"https://mymmrac.github.io/telego-docs/docs/methods/getting-updates/",title:"Getting Updates",description:"Getting updates via long pulling or webhook without helpers.",content:"Hmm\u0026hellip;\n"}).add({id:13,href:"https://mymmrac.github.io/telego-docs/docs/methods/sending-files/",title:"Sending Files",description:"Interpretation of files (photos, documents, etc.) and sending them.",content:"Hmm\u0026hellip;\n"}).add({id:14,href:"https://mymmrac.github.io/telego-docs/docs/helpers/",title:"Helpers",description:"Helper functions and with like methods.",content:"Helper functions and with like methods\n"}).add({id:15,href:"https://mymmrac.github.io/telego-docs/docs/helpers/updates-long-pulling/",title:"Updates via Long Pulling",description:"Getting updates via long pulling using helper func.",content:"Hmm\u0026hellip;\n"}).add({id:16,href:"https://mymmrac.github.io/telego-docs/docs/helpers/updates-webhook/",title:"Updates via Webhook",description:"Getting updates via webhook using helper func.",content:"Hmm\u0026hellip;\n"}).add({id:17,href:"https://mymmrac.github.io/telego-docs/docs/helpers/with-like-methods/",title:"With Like Methods",description:"Utility methods of parameters and types.",content:"Hmm\u0026hellip;\n"}).add({id:18,href:"https://mymmrac.github.io/telego-docs/docs/utilities/",title:"Utilities",description:"Utility methods for parameters, types and more.",content:"Utility methods for parameters, types and more\n"}).add({id:19,href:"https://mymmrac.github.io/telego-docs/docs/utilities/utilities-basics/",title:"Utilities Basics",description:"Utility methods provided by Telego.",content:"Hmm\u0026hellip;\n"}).add({id:20,href:"https://mymmrac.github.io/telego-docs/docs/handlers/",title:"Handlers",description:"Bot handlers for processing updates with predicates.",content:"Bot handlers for processing updates with predicates\n"}).add({id:21,href:"https://mymmrac.github.io/telego-docs/docs/handlers/handlers-basics/",title:"Handlers Basics",description:"Basics of using bot handlers (like net/http but with predicates).",content:"Hmm\u0026hellip;\n"}).add({id:22,href:"https://mymmrac.github.io/telego-docs/docs/handlers/predicates/",title:"Predicates",description:"Predicates provided by Telego for handlers.",content:"Hmm\u0026hellip;\n"}),search.addEventListener('input',b,!0);function b(){var b,e;const d=5;b=this.value,e=a.search(b,{limit:d,enrich:!0});const c=new Map;for(const a of e.flatMap(a=>a.result)){if(c.has(a.doc.href))continue;c.set(a.doc.href,a.doc)}if(suggestions.innerHTML="",suggestions.classList.remove('d-none'),c.size===0&&b){const a=document.createElement('div');a.innerHTML=`No results for "<strong>${b}</strong>"`,a.classList.add("suggestion__no-results"),suggestions.appendChild(a);return}for(const[h,g]of c){const b=document.createElement('div');suggestions.appendChild(b);const a=document.createElement('a');a.href=h,b.appendChild(a);const e=document.createElement('span');e.textContent=g.title,e.classList.add("suggestion__title"),a.appendChild(e);const f=document.createElement('span');if(f.textContent=g.description,f.classList.add("suggestion__description"),a.appendChild(f),suggestions.appendChild(b),suggestions.childElementCount==d)break}}})()